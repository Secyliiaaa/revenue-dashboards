# -*- coding: utf-8 -*-
"""revenue_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HFUrQ4XUaIo7-O-S7IERVszFm503fO6i
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Load data
file_path = 'iconnet-revenue.xlsx'
data = pd.read_excel(file_path)

# Preprocess the data
data['tanggal'] = pd.to_datetime(data['tanggal'])
data['tahun'] = data['tanggal'].dt.year
data['month'] = data['tanggal'].dt.strftime('%Y-%m')

# Sum revenue by month for each category
revenue_by_province = data.groupby(['month', 'namakp'])['totalharga'].sum().unstack().fillna(0)
revenue_by_product = data.groupby(['month', 'namaproduk'])['totalharga'].sum().unstack().fillna(0)
revenue_by_agent = data.groupby(['month', 'mitraagen'])['totalharga'].sum().unstack().fillna(0)
revenue_by_ae = data.groupby(['month', 'ae'])['totalharga'].sum().unstack().fillna(0)

# Data for actual and predicted revenue
data_2022 = {
    'Province': ['BALI', 'NUSA TENGGARA BARAT', 'NUSA TENGGARA TIMUR'],
    '2022': [3220853684, 1277415042, 604448722]
}

data_2023 = {
    'Province': ['BALI', 'NUSA TENGGARA BARAT', 'NUSA TENGGARA TIMUR'],
    '2023': [9086408000, 3143802000, 3672627000]
}

predicted_data = {
    'Province': ['BALI', 'NUSA TENGGARA BARAT', 'NUSA TENGGARA TIMUR'],
    '2024': [9881050833, 3599877853, 4125092421],
    '2025': [10966640866, 3836036550, 4395696223],
    '2026': [11578671120, 4360106712, 4879712932]
}

df_actual_2022 = pd.DataFrame(data_2022).set_index('Province')
df_actual_2023 = pd.DataFrame(data_2023).set_index('Province')
df_pred = pd.DataFrame(predicted_data).set_index('Province')

# Function to format revenue in millions
def format_revenue_million(revenue):
    return f"Rp {revenue / 1_000_000:.2f}M"

# Function to calculate percentage change
def calculate_percentage_change(current, previous):
    return ((current - previous) / previous) * 100

# Streamlit Dashboard
image = 'logo123.png'
st.sidebar.image(image, use_column_width=True)

with st.sidebar:
    st.title('Dashboard Revenue ICONNET')
    page = st.radio(
        "Select Page",
        ["Dashboard", "Actual Data", "Predictor"],
        index=0,
        key="main_menu"
    )

# Custom CSS for sidebar and titles
st.markdown(
    """
    <style>
    .sidebar .sidebar-content {
        font-size: 18px;
    }
    .sidebar .sidebar-content h2 {
        font-size: 24px;
        font-weight: bold;
        text-align: center;
    }
    .sidebar .sidebar-content label {
        font-size: 20px;
        margin-bottom: 10px;
    }
    .sidebar .sidebar-content .stRadio {
        margin-bottom: 20px;
    }
    .stRadio > div {
        padding-top: 10px;
        padding-bottom: 10px;
    }
    .plotly-tooltip {
        font-size: 14px !important;
        font-family: Arial, sans-serif !important.
    }
    .title-line {
        position: relative;
        display: inline-block;
        font-size: 40px;
        font-weight: bold.
    }
    .title-line::after {
        content: '';
        display: block.
        width: 100%.
        height: 4px.
        background: rgba(0, 0, 0, 0.1).
        margin-top: 8px.
        border-radius: 2px.
    }
    h1.title-line {
        border-bottom: 2px solid #ccc;
        padding-bottom: 10px;
        margin-top: 20px;
    }
    .quick-insight {
        background-color: #444;
        color: white;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
    }
    .dashboard .col1 .plotly-graph-div,
    .dashboard .col2 .plotly-graph-div {
        width: 100% !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ------------------------------------------------------------------------------

if page == "Dashboard":
    st.markdown('<h1 class="title-line">Dashboard Revenue ICONNET</h1>', unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        actual_year = st.selectbox("Select Actual Year", ["2022", "2023"])
        df_actual_year = df_actual_2022 if actual_year == "2022" else df_actual_2023
        fig_actual = go.Figure()

        # Add bar chart for actual data
        fig_actual.add_trace(go.Bar(
            x=[0, 1, 2],
            y=df_actual_year[actual_year],
            name=f"Actual Revenue {actual_year}",
            marker_color='blue',
            hovertemplate="<br>".join([
                "Year: " + actual_year,
                "Province: %{x}",
                "Revenue: Rp %{y:,.2f}"
            ])
        ))

        fig_actual.update_layout(
            title=dict(
                text=f"Actual Revenue for {actual_year}"
            ),
            xaxis=dict(
                tickmode='array',
                tickvals=[0, 1, 2],
                ticktext=['BALI', 'NTB', 'NTT']
            ),
            yaxis=dict(
                title="Revenue (Rp)",
                tickformat=',.0f',
                titlefont=dict(size=14)
            ),
            legend_title="Province",
            barmode='group',
            width=600,
            height=400
        )

        st.plotly_chart(fig_actual, use_container_width=True)

    with col2:
        prediction_year = st.selectbox("Select Prediction Year", ["2024", "2025", "2026"])
        fig_pred = go.Figure()

        # Add bar chart for predicted data
        fig_pred.add_trace(go.Bar(
            x=df_pred.index,
            y=df_pred[prediction_year],
            name=f"Predicted Revenue {prediction_year}",
            marker_color='yellow',
            hovertemplate="<br>".join([
                "Year: " + prediction_year,
                "Province: %{x}",
                "Revenue: Rp %{y:,.2f}"
            ])
        ))

        fig_pred.update_layout(
            title=dict(
                text=f"Predicted Revenue for {prediction_year}"
            ),
            xaxis=dict(
                tickmode='array',
                tickvals=['BALI', 'NUSA TENGGARA BARAT', 'NUSA TENGGARA TIMUR'], # Sesuaikan dengan indeks DataFrame df_pred
                ticktext=['BALI', 'NTB', 'NTT'] # Ubah label provinsi
            ),
            yaxis=dict(
                title="Revenue (Rp)",
                tickformat=',.0f',
                titlefont=dict(size=14)
            ),
            legend_title="Province",
            barmode='group',
            width=600,
            height=400
        )

        st.plotly_chart(fig_pred, use_container_width=True)

    total_predicted_revenue = df_pred[prediction_year].sum()
    total_actual_revenue = df_actual_year[actual_year].sum()
    percentage_change = calculate_percentage_change(total_predicted_revenue, total_actual_revenue)

    st.metric(
        label="Overall Revenue",
        value=f"Rp {total_predicted_revenue:,.2f}",
        delta=f"{percentage_change:.2f} %",
        delta_color="normal",
        help="This represents the total predicted revenue for the selected year and the percentage change compared to the selected actual year."
    )

    # Display quick insights
    col1, col2 = st.columns(2)

    with col1:
        st.markdown(
            f"""
            <div class="insight-box">
                <h3>Quick Insights</h3>
                <p><b>Total Revenue for {prediction_year}:</b> Rp {total_predicted_revenue:,.2f}</p>
                <p><b>Percentage Change compared to {actual_year}:</b> {percentage_change:.2f} %</p>
                <p><b>Province Comparison:</b></p>
                <ul>
                    <li><b>BALI:</b> Rp {df_pred.at['BALI', prediction_year]:,.2f} ({calculate_percentage_change(df_pred.at['BALI', prediction_year], df_actual_year.at['BALI', actual_year]):.2f} %)</li>
                    <li><b>NUSA TENGGARA BARAT:</b> Rp {df_pred.at['NUSA TENGGARA BARAT', prediction_year]:,.2f} ({calculate_percentage_change(df_pred.at['NUSA TENGGARA BARAT', prediction_year], df_actual_year.at['NUSA TENGGARA BARAT', actual_year]):.2f} %)</li>
                    <li><b>NUSA TENGGARA TIMUR:</b> Rp {df_pred.at['NUSA TENGGARA TIMUR', prediction_year]:,.2f} ({calculate_percentage_change(df_pred.at['NUSA TENGGARA TIMUR', prediction_year], df_actual_year.at['NUSA TENGGARA TIMUR', actual_year]):.2f} %)</li>
                </ul>
            </div>
            """, unsafe_allow_html=True
        )

    with col2:
        st.markdown(
            f"""
            <div class="insight-box">
                <h3>Recommendations</h3>
                <ul>
                    <li>Fokus pada provinsi dengan pertumbuhan pendapatan tertinggi untuk kampanye pemasaran yang ditargetkan.</li>
                    <li>Selidiki alasan pertumbuhan yang lebih rendah di provinsi tertentu dan kembangkan strategi untuk mengatasinya.</li>
                    <li>Pertimbangkan untuk menyesuaikan harga atau penawaran produk di wilayah dengan prediksi pertumbuhan yang lebih rendah untuk meningkatkan pendapatan.</li>
                </ul>
            </div>
            """, unsafe_allow_html=True
        )

# ------------------------------------------------------------------------------

elif page == "Actual Data":
    st.markdown('<h1 class="title-line">Actual Data Revenue of 2023</h1>', unsafe_allow_html=True)

    fig_province = go.Figure()
    fig_product = go.Figure()
    fig_agent = go.Figure()
    fig_ae = go.Figure()

    for province in revenue_by_province.columns:
        fig_province.add_trace(
            go.Scatter(
                x=revenue_by_province.index,
                y=revenue_by_province[province],
                mode='lines+markers',
                name=province,
                hovertemplate="<br>".join(
                    [
                        "Month: %{x}",
                        "Revenue: Rp %{y:,.2f}",
                        "Province: " + province,
                    ]
                )
            )
        )

    for product in revenue_by_product.columns:
        fig_product.add_trace(
            go.Scatter(
                x=revenue_by_product.index,
                y=revenue_by_product[product],
                mode='lines+markers',
                name=product,
                hovertemplate="<br>".join(
                    [
                        "Month: %{x}",
                        "Revenue: Rp %{y:,.2f}",
                        "Product: " + product,
                    ]
                )
            )
        )

    for agent in revenue_by_agent.columns:
        fig_agent.add_trace(
            go.Scatter(
                x=revenue_by_agent.index,
                y=revenue_by_agent[agent],
                mode='lines+markers',
                name=agent,
                hovertemplate="<br>".join(
                    [
                        "Month: %{x}",
                        "Revenue: Rp %{y:,.2f}",
                        "Agent: " + agent,
                    ]
                )
            )
        )

    for ae in revenue_by_ae.columns:
        fig_ae.add_trace(
            go.Scatter(
                x=revenue_by_ae.index,
                y=revenue_by_ae[ae],
                mode='lines+markers',
                name=ae,
                hovertemplate="<br>".join(
                    [
                        "Month: %{x}",
                        "Revenue: Rp %{y:,.2f}",
                        "AE: " + ae,
                    ]
                )
            )
        )

    # Update layout and axes for all figures
    def update_layout(fig, title, legend_title):
        fig.update_layout(
            title=dict(text=title, font=dict(size=20, color='black', family="Arial", weight="bold")),
            xaxis=dict(title="Month", tickmode='array', tickvals=revenue_by_province.index,
                       ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']),
            yaxis=dict(
                title="Revenue (Rp)",
                tickformat=',.0f',
                titlefont=dict(size=14)
            ),
            legend=dict(title=legend_title, x=1, y=1.02, xanchor="left"),
            width=1000,
            height=600,
            margin=dict(l=20, r=20, t=50, b=20)
        )

    update_layout(fig_province, "Revenue by Province", "Province")
    update_layout(fig_product, "Revenue by Name of Product", "Product")
    update_layout(fig_agent, "Revenue by Agent Partner", "Agent")
    update_layout(fig_ae, "Revenue by Account Executive", "AE")

    # Display figures
    st.plotly_chart(fig_province, use_container_width=True)
    st.plotly_chart(fig_product, use_container_width=True)
    st.plotly_chart(fig_agent, use_container_width=True)
    st.plotly_chart(fig_ae, use_container_width=True)

# ------------------------------------------------------------------------------

elif page == "Predictor":
    st.markdown('<h1 class="title-line">Revenue Future Predictor</h1>', unsafe_allow_html=True)

    # Data Prediksi
    predicted_data = {
        'Province': ['BALI', 'NUSA TENGGARA BARAT', 'NUSA TENGGARA TIMUR'],
        '2024': [9881050833, 3599877853, 4125092421],
        '2025': [10966640866, 3836036550, 4395696223],
        '2026': [11578671120, 4360106712, 4879712932]
    }
    df_pred = pd.DataFrame(predicted_data).set_index('Province')

    # Selectors for prediction inputs
    prediction_year = st.selectbox("Select Prediction Year", ["2024", "2025", "2026"], index=0, placeholder="Select Prediction Year")
    province = st.selectbox("Select Province", data['namakp'].unique(), index=0, placeholder="Select Province")
    product = st.selectbox("Select Name of Product", data['namaproduk'].unique(), index=0, placeholder="Select Name of Product")
    agent = st.selectbox("Select Agent Partner", data['mitraagen'].unique(), index=0, placeholder="Select Agent Partner")
    subscription_length = st.slider("Long Subscription", 1, 12, 3)

    # Fungsi untuk menghitung korelasi
    @st.experimental_memo
    def calculate_correlation(year):
        filtered_data_year = data[data['tahun'] == int(year)]
        correlation = np.corrcoef(filtered_data_year['totalharga'], filtered_data_year['long_subscription'])[0, 1]
        return correlation

    if st.button("Predict Revenue"):
        # Ambil prediksi pendapatan dari DataFrame df_pred
        predicted_revenue = df_pred.loc[province, prediction_year]

        # Tampilkan hasil prediksi
        st.metric(label="Revenue Prediction", value=f"Rp {predicted_revenue:,.2f}")

        # Hitung dan tampilkan korelasi
        correlation = calculate_correlation(prediction_year)
        st.write(f"**Korelasi antara total harga dan lama berlangganan pada tahun {prediction_year}:** {correlation:.3f}")

        # Generate Quick Insights
        avg_product_revenue_all = df_pred.loc[:, prediction_year].mean()
        perc_change_product = calculate_percentage_change(predicted_revenue, avg_product_revenue_all)

        # Perbandingan Tahun Sebelumnya (menggunakan data prediksi)
        try:
            prev_year = int(prediction_year) - 1
            prev_year_revenue = df_pred.loc[province, str(prev_year)]  # Ubah prev_year menjadi string
            perc_change_prev_year = calculate_percentage_change(predicted_revenue, prev_year_revenue)
        except KeyError:
            perc_change_prev_year = "N/A"  # Jika tidak ada data untuk tahun sebelumnya

        avg_agent_revenue_all = data.groupby('mitraagen')['totalharga'].mean()[agent]
        perc_change_agent = calculate_percentage_change(predicted_revenue, avg_agent_revenue_all)

        increased_revenue = historical_avg_revenue * (subscription_length + 3)
        perc_change_subscription = calculate_percentage_change(increased_revenue, predicted_revenue)

        # Display Quick Insights
        st.subheader("Quick Insights")
        st.markdown(f"- Prediksi pendapatan untuk **{product}** di **{province}** adalah **{perc_change_product:.2f}%** {'lebih tinggi' if perc_change_product > 0 else 'lebih rendah'} dari rata-rata pendapatan semua produk sejenis.")

        if not prev_year_data.empty:  # Hanya tampilkan jika ada data tahun sebelumnya
            st.markdown(f"- Pendapatan dari **{product}** di **{province}** diperkirakan akan {'meningkat' if perc_change_prev_year > 0 else 'menurun'} sebesar **{abs(perc_change_prev_year):.2f}%** dibandingkan tahun {prev_year}.")
        else:
            st.markdown(f"- Tidak ada data pendapatan tahun sebelumnya untuk produk **{product}** di **{province}**.")

        st.markdown(f"- Mitra agen **{agent}** memiliki potensi pendapatan **{perc_change_agent:.2f}%** {'lebih tinggi' if perc_change_agent > 0 else 'lebih rendah'} dari rata-rata pendapatan semua mitra agen.")
        st.markdown(f"- Peningkatan durasi berlangganan dari **{subscription_length}** bulan menjadi **{subscription_length + 3}** bulan dapat meningkatkan pendapatan sebesar **{perc_change_subscription:.2f}%**.")